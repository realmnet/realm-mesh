.PHONY: all help install build clean test \
        install-broker install-console install-sdk install-mvp install-all \
        build-broker build-console build-sdk build-all \
        clean-broker clean-console clean-sdk clean-all \
        broker-db-up broker-db-down broker-db-reset broker-db-shell broker-db-logs broker-db-setup \
        broker broker-dev broker-start \
        console console-dev \
        mvp-install mvp-demo mvp-fast mvp-continuous mvp-price-check mvp-stress mvp-multi-realm mvp-all-patterns \
        kill-all kill-broker kill-console kill-agents \
        env-setup env-broker env-console env-mvp \
        dev mvp

# ==============================================
# Configuration
# ==============================================
BROKER_DIR := broker/service
CONSOLE_DIR := broker/console
SDK_DIR := sdk/node
MVP_DIR := mvp
CORE_DIR := core

# ==============================================
# Environment Variables (Non-Sensitive)
# ==============================================

# Database Configuration
DB_HOST := localhost
DB_PORT := 5433
DB_NAME := broker_db
DB_USER := broker_user
DB_PASSWORD := broker_pass
DATABASE_URL := postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)

# Broker Service
ADMIN_API_KEY := admin-key-123
INTERNAL_PORT := 8080
EXTERNAL_PORT := 8443
ADMIN_PORT := 3001
LOG_LEVEL := info

# Console
CONSOLE_PORT := 3000
NEXT_PUBLIC_GATEWAY_URL := http://localhost:$(ADMIN_PORT)
NEXT_PUBLIC_API_KEY := $(ADMIN_API_KEY)

# MVP
GATEWAY_URL := ws://localhost:$(INTERNAL_PORT)
AUTH_TOKEN := demo-token
REALM_ID_PREFIX := demo

# Environment
NODE_ENV := development

# ==============================================
# Help
# ==============================================
all: help

help:
	@echo "< InterRealm Mesh Build System"
	@echo "========================="
	@echo ""
	@echo "=ï¿½ Installation Commands:"
	@echo "  make install-all        - Install all dependencies (broker, console, sdk, mvp)"
	@echo "  make install-broker     - Install broker dependencies"
	@echo "  make install-console    - Install console dependencies"
	@echo "  make install-sdk        - Install SDK dependencies"
	@echo "  make install-mvp        - Install MVP dependencies (including agents)"
	@echo ""
	@echo "=( Build Commands:"
	@echo "  make build-all          - Build everything (broker, console, sdk)"
	@echo "  make build-broker       - Build broker service"
	@echo "  make build-console      - Build console (Next.js)"
	@echo "  make build-sdk          - Build Node.js SDK"
	@echo ""
	@echo ">ï¿½ Clean Commands:"
	@echo "  make clean-all          - Clean all build artifacts"
	@echo "  make clean-broker       - Clean broker build"
	@echo "  make clean-console      - Clean console build"
	@echo "  make clean-sdk          - Clean SDK build"
	@echo ""
	@echo "=ï¿½ Run Commands:"
	@echo "  make broker             - Start broker (with database check)"
	@echo "  make broker-dev         - Start broker in dev mode with hot reload"
	@echo "  make console            - Start console UI"
	@echo "  make console-dev        - Start console in dev mode"
	@echo ""
	@echo "=ï¿½  Database Commands:"
	@echo "  make broker-db-up       - Start broker database (PostgreSQL on port 5433)"
	@echo "  make broker-db-down     - Stop broker database"
	@echo "  make broker-db-reset    - Reset broker database (destroys data)"
	@echo "  make broker-db-shell    - Open PostgreSQL shell"
	@echo "  make broker-db-logs     - Show database logs"
	@echo ""
	@echo "<ï¿½ MVP Demo Commands:"
	@echo "  make mvp-demo           - Run the main MVP demo (price-check)"
	@echo "  make mvp-fast           - Run fast demo scenario"
	@echo "  make mvp-continuous     - Run continuous demo (cycles through patterns)"
	@echo "  make mvp-price-check    - Run price check scenario"
	@echo "  make mvp-stress         - Run stress test scenario"
	@echo "  make mvp-multi-realm    - Run multi-realm coordination"
	@echo "  make mvp-all-patterns   - Run all patterns demo"
	@echo ""
	@echo "=ï¿½ Kill Commands:"
	@echo "  make kill-all           - Kill all running processes"
	@echo "  make kill-broker        - Kill broker processes"
	@echo "  make kill-console       - Kill console processes"
	@echo "  make kill-agents        - Kill agent processes"
	@echo ""
	@echo ""
	@echo "ï¿½ QUICK START (One Command):"
	@echo "  make dev                - Setup everything and start dev environment"
	@echo "  make mvp                - Setup and run full MVP demo"
	@echo ""
	@echo "=ï¿½ Environment Setup:"
	@echo "  make env-setup          - Generate all .env files from config"
	@echo "  make broker-db-setup    - Apply Prisma schema to database"

# ==============================================
# Environment Setup
# ==============================================
env-setup: env-broker env-console env-mvp
	@echo " All .env files generated!"

env-broker:
	@echo "=ï¿½ Generating broker service .env file..."
	@echo "# Broker Database Configuration (Auto-generated)" > $(BROKER_DIR)/.env
	@echo "DB_HOST=$(DB_HOST)" >> $(BROKER_DIR)/.env
	@echo "DB_PORT=$(DB_PORT)" >> $(BROKER_DIR)/.env
	@echo "DB_NAME=$(DB_NAME)" >> $(BROKER_DIR)/.env
	@echo "DB_USER=$(DB_USER)" >> $(BROKER_DIR)/.env
	@echo "DB_PASSWORD=$(DB_PASSWORD)" >> $(BROKER_DIR)/.env
	@echo "DATABASE_URL=$(DATABASE_URL)" >> $(BROKER_DIR)/.env
	@echo "" >> $(BROKER_DIR)/.env
	@echo "# Admin API Security" >> $(BROKER_DIR)/.env
	@echo "ADMIN_API_KEY=$(ADMIN_API_KEY)" >> $(BROKER_DIR)/.env
	@echo "" >> $(BROKER_DIR)/.env
	@echo "# Internal Broker" >> $(BROKER_DIR)/.env
	@echo "INTERNAL_PORT=$(INTERNAL_PORT)" >> $(BROKER_DIR)/.env
	@echo "" >> $(BROKER_DIR)/.env
	@echo "# External Broker (for partners)" >> $(BROKER_DIR)/.env
	@echo "EXTERNAL_PORT=$(EXTERNAL_PORT)" >> $(BROKER_DIR)/.env
	@echo "" >> $(BROKER_DIR)/.env
	@echo "# Admin Console API" >> $(BROKER_DIR)/.env
	@echo "ADMIN_PORT=$(ADMIN_PORT)" >> $(BROKER_DIR)/.env
	@echo "" >> $(BROKER_DIR)/.env
	@echo "# Logging" >> $(BROKER_DIR)/.env
	@echo "LOG_LEVEL=$(LOG_LEVEL)" >> $(BROKER_DIR)/.env
	@echo "NODE_ENV=$(NODE_ENV)" >> $(BROKER_DIR)/.env
	@echo " Generated $(BROKER_DIR)/.env"

env-console:
	@echo "=ï¿½ Generating console .env.local file..."
	@echo "# Console Environment Variables (Auto-generated)" > $(CONSOLE_DIR)/.env.local
	@echo "" >> $(CONSOLE_DIR)/.env.local
	@echo "# Gateway API Configuration" >> $(CONSOLE_DIR)/.env.local
	@echo "NEXT_PUBLIC_GATEWAY_URL=$(NEXT_PUBLIC_GATEWAY_URL)" >> $(CONSOLE_DIR)/.env.local
	@echo "NEXT_PUBLIC_API_KEY=$(NEXT_PUBLIC_API_KEY)" >> $(CONSOLE_DIR)/.env.local
	@echo "NEXT_PUBLIC_ADMIN_API_KEY=$(NEXT_PUBLIC_API_KEY)" >> $(CONSOLE_DIR)/.env.local
	@echo "" >> $(CONSOLE_DIR)/.env.local
	@echo "# Environment" >> $(CONSOLE_DIR)/.env.local
	@echo "NODE_ENV=$(NODE_ENV)" >> $(CONSOLE_DIR)/.env.local
	@echo " Generated $(CONSOLE_DIR)/.env.local"

env-mvp:
	@echo "=ï¿½ Generating MVP .env file..."
	@echo "# Gateway Configuration (Auto-generated)" > $(MVP_DIR)/.env
	@echo "GATEWAY_URL=$(GATEWAY_URL)" >> $(MVP_DIR)/.env
	@echo "AUTH_TOKEN=$(AUTH_TOKEN)" >> $(MVP_DIR)/.env
	@echo "" >> $(MVP_DIR)/.env
	@echo "# Web Console" >> $(MVP_DIR)/.env
	@echo "CONSOLE_PORT=$(CONSOLE_PORT)" >> $(MVP_DIR)/.env
	@echo "" >> $(MVP_DIR)/.env
	@echo "# Agent Configuration" >> $(MVP_DIR)/.env
	@echo "REALM_ID_PREFIX=$(REALM_ID_PREFIX)" >> $(MVP_DIR)/.env
	@echo " Generated $(MVP_DIR)/.env"

broker-db-setup:
	@echo "=ï¿½ Setting up database schema with Prisma..."
	@if ! docker ps | grep -q broker-postgres 2>/dev/null; then \
		echo "= Database not running, starting it..."; \
		$(MAKE) broker-db-up; \
		sleep 3; \
	fi
	@echo "=ï¿½ Waiting for database to be ready..."
	@until docker exec broker-postgres pg_isready -U broker_user -d broker_db > /dev/null 2>&1; do \
		echo "ï¿½ Still waiting for PostgreSQL..."; \
		sleep 2; \
	done
	@echo " Database is ready!"
	@echo "=ï¿½ Pushing Prisma schema to database..."
	@cd $(BROKER_DIR) && npx prisma db push --skip-generate
	@echo "=ï¿½ Generating Prisma client..."
	@cd $(BROKER_DIR) && npx prisma generate
	@echo " Prisma schema applied successfully!"

# ==============================================
# One-Command Workflows
# ==============================================
dev: env-setup install-all broker-db-up broker-db-setup
	@echo ""
	@echo "< Development Environment Ready!"
	@echo "========================="
	@echo ""
	@echo "ï¿½ Next Steps:"
	@echo "  Terminal 1: make broker-dev    - Start broker service"
	@echo "  Terminal 2: make console-dev   - Start web console"
	@echo ""
	@echo "Or run the MVP demo with: make mvp"

mvp: env-setup install-mvp broker-db-up broker-db-setup
	@echo ""
	@echo "<ï¿½ Starting MVP Demo Environment..."
	@echo "========================="
	@echo ""
	@echo "=ï¿½ Step 1: Starting broker in background..."
	@cd $(BROKER_DIR) && npm run dev &
	@echo "ï¿½ Waiting for broker to start..."
	@sleep 8
	@echo ""
	@echo "=ï¿½ Step 2: Starting pricing agent..."
	@cd $(MVP_DIR)/agents/pricing-agent && npm start &
	@sleep 2
	@echo ""
	@echo "=ï¿½ Step 3: Starting inventory agent..."
	@cd $(MVP_DIR)/agents/inventory-agent && npm start &
	@sleep 3
	@echo ""
	@echo "=ï¿½ Step 4: Running price check scenario..."
	@echo ""
	@cd $(MVP_DIR) && node scenarios/price-check-scenario.js
	@echo ""
	@echo "< MVP Demo Complete!"
	@echo ""
	@echo "To run again: make mvp-price-check"
	@echo "To kill all: make kill-all"

# ==============================================
# Installation
# ==============================================
install-all: install-broker install-console install-sdk install-mvp
	@echo " All dependencies installed!"

install-broker:
	@echo "=ï¿½ Installing broker dependencies..."
	cd $(BROKER_DIR) && npm install
	@echo " Broker dependencies installed"

install-console:
	@echo "=ï¿½ Installing console dependencies..."
	cd $(CONSOLE_DIR) && npm install
	@echo " Console dependencies installed"

install-sdk:
	@echo "=ï¿½ Installing SDK dependencies..."
	cd $(SDK_DIR) && npm install
	@echo " SDK dependencies installed"

install-mvp:
	@echo "=ï¿½ Installing MVP dependencies..."
	cd $(MVP_DIR) && npm install
	@echo "=ï¿½ Installing pricing agent dependencies..."
	cd $(MVP_DIR)/agents/pricing-agent && npm install
	@echo "=ï¿½ Installing inventory agent dependencies..."
	cd $(MVP_DIR)/agents/inventory-agent && npm install
	@echo " MVP dependencies installed"

# ==============================================
# Build
# ==============================================
build-all: build-broker build-console build-sdk
	@echo " All projects built successfully!"

build-broker:
	@echo "=( Building broker..."
	cd $(BROKER_DIR) && npm run build
	@echo " Broker built"

build-console:
	@echo "=( Building console..."
	cd $(CONSOLE_DIR) && npm run build
	@echo " Console built"

build-sdk:
	@echo "=( Building SDK..."
	cd $(SDK_DIR) && npm run build
	@echo " SDK built"

# ==============================================
# Clean
# ==============================================
clean-all: clean-broker clean-console clean-sdk
	@echo " All projects cleaned"

clean-broker:
	@echo ">ï¿½ Cleaning broker..."
	cd $(BROKER_DIR) && rm -rf dist node_modules/.cache
	@echo " Broker cleaned"

clean-console:
	@echo ">ï¿½ Cleaning console..."
	cd $(CONSOLE_DIR) && rm -rf .next out node_modules/.cache
	@echo " Console cleaned"

clean-sdk:
	@echo ">ï¿½ Cleaning SDK..."
	cd $(SDK_DIR) && rm -rf dist node_modules/.cache
	@echo " SDK cleaned"

# ==============================================
# Broker Database
# ==============================================
broker-db-up:
	@echo "=ï¿½ Starting broker database (PostgreSQL)..."
	@if docker ps -a | grep -q broker-postgres 2>/dev/null; then \
		if docker ps | grep -q broker-postgres 2>/dev/null; then \
			echo "= Database is already running!"; \
		else \
			echo "= Found stopped container, removing it..."; \
			docker-compose -f $(BROKER_DIR)/docker-compose.yml down; \
			docker-compose -f $(BROKER_DIR)/docker-compose.yml up -d; \
		fi; \
	else \
		docker-compose -f $(BROKER_DIR)/docker-compose.yml up -d || { \
			echo ""; \
			echo "= ERROR: Failed to start database!"; \
			echo "= Port 5433 or 5051 is likely already in use."; \
			echo ""; \
			echo "Try: make broker-db-down"; \
			echo "Or: docker ps -a (to check for stopped containers)"; \
			exit 1; \
		}; \
	fi
	@echo "=ï¿½ PostgreSQL is starting on port 5433"
	@echo "=' pgAdmin is available at http://localhost:5051"
	@echo "= Default credentials: admin@broker.local / admin"
	@echo "=ï¿½ Database: broker_db, User: broker_user"

broker-db-down:
	@echo "=ï¿½ Stopping broker database..."
	docker-compose -f $(BROKER_DIR)/docker-compose.yml down

broker-db-reset:
	@echo "= Resetting broker database (this will destroy all data)..."
	docker-compose -f $(BROKER_DIR)/docker-compose.yml down -v
	docker-compose -f $(BROKER_DIR)/docker-compose.yml up -d
	@echo "ï¿½ Waiting for database to be ready..."
	@sleep 5
	@until docker exec broker-postgres pg_isready -U broker_user -d broker_db > /dev/null 2>&1; do \
		sleep 2; \
	done
	@echo " Database reset complete!"
	@echo "=ï¿½ Applying Prisma schema..."
	@$(MAKE) broker-db-setup

broker-db-shell:
	@echo "=' Opening PostgreSQL shell for broker database..."
	docker exec -it broker-postgres psql -U broker_user -d broker_db

broker-db-logs:
	@echo "=ï¿½ Showing broker database logs..."
	docker-compose -f $(BROKER_DIR)/docker-compose.yml logs -f broker-postgres

# ==============================================
# Run Broker
# ==============================================
broker: broker-start

broker-start:
	@echo "=ï¿½ Starting broker with database..."
	@echo "=ï¿½ Step 1: Checking if database is running..."
	@if ! docker ps | grep -q broker-postgres 2>/dev/null; then \
		echo "= Database not running, starting PostgreSQL..."; \
		docker-compose -f $(BROKER_DIR)/docker-compose.yml up -d; \
		echo "ï¿½ Waiting for PostgreSQL to be ready..."; \
		sleep 10; \
		until docker exec broker-postgres pg_isready -U broker_user -d broker_db > /dev/null 2>&1; do \
			echo "ï¿½ Still waiting for PostgreSQL..."; \
			sleep 2; \
		done; \
		echo " PostgreSQL is ready!"; \
	else \
		echo " Database is already running"; \
	fi
	@echo "=ï¿½ Step 2: Starting broker application..."
	@echo "< Internal Broker: ws://localhost:8080"
	@echo "= External Broker: ws://localhost:8443"
	@echo "=ï¿½  Admin API: http://localhost:3001"
	@echo "=ï¿½ Database: localhost:5433 (broker_db / broker_user)"
	@echo ""
	cd $(BROKER_DIR) && npm start

broker-dev:
	@echo "=ï¿½ Starting broker in development mode..."
	@if [ ! -f $(BROKER_DIR)/.env ]; then \
		echo "= .env file not found, generating..."; \
		$(MAKE) env-broker; \
	fi
	@if ! docker ps | grep -q broker-postgres 2>/dev/null; then \
		echo "= Starting database..."; \
		docker-compose -f $(BROKER_DIR)/docker-compose.yml up -d; \
		echo "ï¿½ Waiting for database..."; \
		sleep 5; \
		until docker exec broker-postgres pg_isready -U broker_user -d broker_db > /dev/null 2>&1; do \
			sleep 2; \
		done; \
	fi
	@echo "=% Starting broker with hot reload..."
	cd $(BROKER_DIR) && npm run dev

# ==============================================
# Run Console
# ==============================================
console: console-dev

console-dev:
	@echo "=ï¿½ Starting console UI..."
	@echo "< Console will be available at: http://localhost:3000"
	cd $(CONSOLE_DIR) && npm run dev

# ==============================================
# MVP Scenarios
# ==============================================
mvp-demo: mvp-price-check

mvp-price-check:
	@echo "<ï¿½ Running price check scenario..."
	@echo "ï¿½  Make sure broker and agents are running!"
	@echo "   Terminal 1: make broker-dev"
	@echo "   Terminal 2: cd mvp/agents/pricing-agent && npm start"
	@echo "   Terminal 3: cd mvp/agents/inventory-agent && npm start"
	@echo ""
	cd $(MVP_DIR) && node scenarios/price-check-scenario.js

mvp-fast:
	@echo "<ï¿½ Running fast demo scenario..."
	@echo "ï¿½  Make sure broker and agents are running!"
	cd $(MVP_DIR) && node scenarios/fast-demo.js

mvp-continuous:
	@echo "<ï¿½ Running continuous demo (cycles through patterns)..."
	@echo "ï¿½  Make sure broker and agents are running!"
	@echo "   This demo will continuously cycle through loop, service, and event patterns"
	cd $(MVP_DIR) && node scenarios/continuous-demo.js

mvp-stress:
	@echo "<ï¿½ Running stress test scenario..."
	@echo "ï¿½  Make sure broker and agents are running!"
	cd $(MVP_DIR) && node scenarios/stress-test.js

mvp-multi-realm:
	@echo "<ï¿½ Running multi-realm coordination..."
	@echo "ï¿½  Make sure broker and agents are running!"
	cd $(MVP_DIR) && node scenarios/multi-realm-coordination.js

mvp-all-patterns:
	@echo "<ï¿½ Running all patterns demo..."
	@echo "ï¿½  Make sure broker and agents are running!"
	cd $(MVP_DIR) && node scenarios/all-patterns.js

# ==============================================
# Kill Processes
# ==============================================
kill-all: kill-broker kill-console kill-agents
	@echo "=ï¿½ All processes killed"

kill-broker:
	@echo "=ï¿½ Killing broker processes..."
	@echo "=ï¿½ Looking for broker processes on ports 3001, 8080, 8443..."
	-@pkill -f "broker.*src/index" 2>/dev/null || true
	-@pkill -f "ts-node.*broker.*index.ts" 2>/dev/null || true
	-@pkill -f "tsx.*broker.*index.ts" 2>/dev/null || true
	-@pkill -f "node.*broker.*index.js" 2>/dev/null || true
	-@for port in 3001 8080 8443; do \
		pid=$$(lsof -ti:$$port 2>/dev/null | head -1); \
		if [ ! -z "$$pid" ]; then \
			echo "=* Killing process $$pid on port $$port"; \
			kill -9 $$pid 2>/dev/null || true; \
		fi; \
	done
	@echo " Broker processes killed"

kill-console:
	@echo "=ï¿½ Killing console processes..."
	@echo "=ï¿½ Looking for Next.js processes on port 3000..."
	-@pkill -f "next.*dev" 2>/dev/null || true
	-@pkill -f "node.*next.*dev" 2>/dev/null || true
	-@for port in 3000; do \
		pid=$$(lsof -ti:$$port 2>/dev/null | head -1); \
		if [ ! -z "$$pid" ]; then \
			echo "=* Killing process $$pid on port $$port"; \
			kill -9 $$pid 2>/dev/null || true; \
		fi; \
	done
	@echo " Console processes killed"

kill-agents:
	@echo "=ï¿½ Killing agent processes..."
	-@pkill -f "pricing-agent" 2>/dev/null || true
	-@pkill -f "inventory-agent" 2>/dev/null || true
	@echo " Agent processes killed"

# ==============================================
# Test
# ==============================================
test:
	@echo ">ï¿½ Running tests..."
	@echo "ï¿½  Test commands to be implemented"
	@echo "   cd $(BROKER_DIR) && npm test"
	@echo "   cd $(SDK_DIR) && npm test"
