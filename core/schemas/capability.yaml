# capability-schema.yaml
# Schema for defining InterRealm Capabilities (decentralized)
# This is a STANDALONE schema definition, not a K8s CRD

name: CapabilitySchema
version: 1.0.0
description: |
  Schema for defining capabilities in a decentralized InterRealm mesh.
  Each realm maintains its own capabilities locally.

schema:
  type: object
  required:
    - apiVersion
    - kind
    - metadata
    - spec

  properties:

    # ============================================
    # Standard headers
    # ============================================
    apiVersion:
      type: string
      const: "interrealm.io/v1alpha1"
      description: "API version for capability definitions"

    kind:
      type: string
      const: "Capability"
      description: "Resource kind"

    metadata:
      type: object
      required:
        - name
        - version
      properties:
        name:
          type: string
          pattern: "^[a-z0-9-]+(\\.[a-z0-9-]+)*$"
          description: "Capability name (namespace.style)"
          example: "healthcare.pharmacy"
          minLength: 2
          maxLength: 100

        version:
          type: string
          pattern: "^\\d+\\.\\d+\\.\\d+(-[a-z0-9-]+)?$"
          description: "Semantic version"
          example: "2.1.0"

        description:
          type: string
          description: "Human-readable description"
          example: "Pharmacy and drug management capabilities"

        author:
          type: string
          description: "Author or team"
          example: "Healthcare Platform Team"

        tags:
          type: array
          items:
            type: string
          description: "Tags for categorization"
          example: ["healthcare", "pharmacy", "fda"]

        stability:
          type: string
          enum: [experimental, beta, stable, deprecated]
          default: stable

        documentation:
          type: string
          format: uri
          description: "Link to documentation"
          example: "https://docs.company.com/capabilities/pharmacy"

        realm:
          type: string
          description: "Optional: originating realm identifier"
          example: "realm://company.com/healthcare/pharmacy"

    # ============================================
    # Capability Specification
    # ============================================
    spec:
      type: object
      properties:

        # ============================================
        # Domain Objects (reusable types)
        # ============================================
        domainObjects:
          type: array
          description: "Reusable type definitions for this capability"
          items:
            type: object
            required:
              - name
              - schema
            properties:
              name:
                type: string
                pattern: "^[A-Z][a-zA-Z0-9]*$"
                description: "Name of the domain object"
                example: "Drug"

              description:
                type: string
                description: "Description of this domain object"
                example: "Pharmaceutical drug information"

              schema:
                type: object
                description: "JSON Schema definition"
                additionalProperties: true
                example:
                  type: object
                  required: ["ndcCode", "name"]
                  properties:
                    ndcCode:
                      type: string
                      pattern: "^[0-9]{5}-[0-9]{4}-[0-9]{2}$"
                    name:
                      type: string
                    manufacturer:
                      type: string

              examples:
                type: array
                description: "Example instances of this domain object"
                items:
                  type: object
                  additionalProperties: true

        # ============================================
        # Service Definitions
        # ============================================
        services:
          type: array
          description: "Services provided by this capability"
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                pattern: "^[A-Z][a-zA-Z0-9]*$"
                description: "Service name"
                example: "DrugQuery"

              description:
                type: string
                description: "Service description"
                example: "Query drug information by NDC code"

              timeout:
                type: integer
                description: "Default timeout in milliseconds"
                default: 30000
                minimum: 0
                example: 5000

              retries:
                type: integer
                description: "Number of retry attempts"
                default: 0
                minimum: 0
                example: 3

              idempotent:
                type: boolean
                description: "Whether the service is idempotent"
                default: false

              input:
                type: object
                description: "Input schema reference"
                properties:
                  domainObjectRef:
                    type: string
                    description: "Reference to domain object in this capability"
                    example: "DrugQueryRequest"

                  externalRef:
                    type: string
                    description: "Reference to external capability domain object"
                    example: "common.types/v1.0.0/Pagination"

                  inlineSchema:
                    type: object
                    description: "Inline JSON Schema"
                    additionalProperties: true

                  description:
                    type: string
                    description: "Description of this input"

                  optional:
                    type: boolean
                    description: "Whether this input is optional"
                    default: false

              output:
                type: object
                description: "Output schema reference"
                properties:
                  domainObjectRef:
                    type: string
                    description: "Reference to domain object in this capability"
                    example: "DrugQueryResponse"

                  externalRef:
                    type: string
                    description: "Reference to external capability domain object"

                  inlineSchema:
                    type: object
                    description: "Inline JSON Schema"
                    additionalProperties: true

                  description:
                    type: string
                    description: "Description of this output"

              errors:
                type: array
                description: "Possible error responses"
                items:
                  type: object
                  required:
                    - code
                  properties:
                    code:
                      type: string
                      description: "Error code"
                      example: "DRUG_NOT_FOUND"

                    description:
                      type: string
                      description: "Error description"
                      example: "The requested drug was not found"

                    httpStatus:
                      type: integer
                      description: "HTTP status code equivalent"
                      example: 404

                    schema:
                      type: object
                      description: "Error payload schema"
                      additionalProperties: true

        # ============================================
        # Event Definitions
        # ============================================
        events:
          type: array
          description: "Events emitted by this capability"
          items:
            type: object
            required:
              - name
              - topic
            properties:
              name:
                type: string
                pattern: "^[A-Z][a-zA-Z0-9]*$"
                description: "Event name"
                example: "DrugRecalled"

              description:
                type: string
                description: "Event description"
                example: "Emitted when a drug is recalled by regulatory authorities"

              topic:
                type: string
                description: "Event topic identifier"
                example: "drug.recalled"

              ordering:
                type: boolean
                description: "Whether events must be processed in order"
                default: false

              payload:
                type: object
                description: "Event payload schema reference"
                properties:
                  domainObjectRef:
                    type: string
                    description: "Reference to domain object"
                    example: "DrugRecallEvent"

                  inlineSchema:
                    type: object
                    description: "Inline JSON Schema"
                    additionalProperties: true

              filters:
                type: array
                description: "Filterable fields for event subscriptions"
                items:
                  type: object
                  required:
                    - field
                  properties:
                    field:
                      type: string
                      description: "Field path in payload"
                      example: "severity"

                    description:
                      type: string
                      description: "Filter description"
                      example: "Filter by recall severity level"

        # ============================================
        # Loop Definitions
        # ============================================
        loops:
          type: array
          description: "AI coordination loops"
          items:
            type: object
            required:
              - name
              - type
            properties:
              name:
                type: string
                pattern: "^[A-Z][a-zA-Z0-9]*$"
                description: "Loop name"
                example: "DrugInteractionCheck"

              type:
                type: string
                enum: [aggregation, voting, bidding, consensus, workflow]
                description: "Type of loop coordination"
                example: "aggregation"

              description:
                type: string
                description: "Loop description"
                example: "Check drug interactions across multiple data sources"

              recruitment:
                type: object
                description: "Recruitment phase configuration"
                properties:
                  broadcastMessage:
                    type: object
                    description: "Schema for recruitment message"
                    properties:
                      domainObjectRef:
                        type: string
                      inlineSchema:
                        type: object
                        additionalProperties: true

                  recruitmentTimeout:
                    type: integer
                    description: "Timeout in milliseconds for recruitment"
                    default: 5000
                    minimum: 0

                  minParticipants:
                    type: integer
                    description: "Minimum number of participants required"
                    default: 1
                    minimum: 1

                  maxParticipants:
                    type: integer
                    description: "Maximum number of participants allowed"
                    minimum: 1

              execution:
                type: object
                description: "Execution phase configuration"
                properties:
                  participantContribution:
                    type: object
                    description: "Schema for participant contributions"
                    properties:
                      domainObjectRef:
                        type: string
                      inlineSchema:
                        type: object
                        additionalProperties: true

                  executionTimeout:
                    type: integer
                    description: "Timeout in milliseconds for execution"
                    default: 30000
                    minimum: 0

                  waitStrategy:
                    type: string
                    enum: [all, quorum, any, majority]
                    description: "How to wait for participant responses"
                    default: all

              aggregation:
                type: object
                description: "Aggregation configuration"
                properties:
                  strategy:
                    type: string
                    enum: [merge, sum, average, vote, rank, custom]
                    description: "How to aggregate participant contributions"
                    default: merge

                  quorum:
                    type: number
                    description: "Required percentage for quorum-based decisions"
                    minimum: 0
                    maximum: 1
                    example: 0.67

                  customFunction:
                    type: string
                    description: "Name of custom aggregation function"

              input:
                type: object
                description: "Loop input schema"
                properties:
                  domainObjectRef:
                    type: string
                  inlineSchema:
                    type: object
                    additionalProperties: true
                optional: true

              output:
                type: object
                description: "Loop output schema"
                properties:
                  domainObjectRef:
                    type: string
                  inlineSchema:
                    type: object
                    additionalProperties: true
                optional: true

        # ============================================
        # Loop Stack Definitions
        # ============================================
        loopStacks:
          type: array
          description: "Sequences of loops for complex workflows"
          items:
            type: object
            required:
              - name
              - loops
            properties:
              name:
                type: string
                pattern: "^[A-Z][a-zA-Z0-9]*$"
                description: "Loop stack name"
                example: "PharmacyNetworkSync"

              description:
                type: string
                description: "Loop stack description"
                example: "Synchronize inventory across pharmacy network"

              input:
                type: object
                description: "Loop stack input schema"
                properties:
                  domainObjectRef:
                    type: string
                  inlineSchema:
                    type: object
                    additionalProperties: true
                optional: true

              output:
                type: object
                description: "Loop stack output schema"
                properties:
                  domainObjectRef:
                    type: string
                  inlineSchema:
                    type: object
                    additionalProperties: true
                optional: true

              loops:
                type: array
                description: "Ordered list of loops in this stack"
                minItems: 1
                items:
                  type: object
                  required:
                    - loopRef
                  properties:
                    loopRef:
                      type: string
                      description: "Reference to loop in this capability"
                      example: "InventoryBroadcast"

                    condition:
                      type: string
                      description: "Optional condition for executing this loop"
                      example: "inventoryChangeCount > 0"

                    allowSubLoops:
                      type: boolean
                      description: "Whether agents can spawn sub-loops"
                      default: true

# ============================================
# Example: Minimal Valid Capability
# ============================================
example-minimal: |
  apiVersion: interrealm.io/v1alpha1
  kind: Capability
  metadata:
    name: healthcare.pharmacy
    version: "1.0.0"
    description: "Basic pharmacy capabilities"
  spec: {}

# ============================================
# Example: Full Capability
# ============================================
example-full: |
  apiVersion: interrealm.io/v1alpha1
  kind: Capability
  metadata:
    name: healthcare.pharmacy
    version: "2.1.0"
    description: "Pharmacy and drug management capabilities"
    author: "Healthcare Platform Team"
    tags: ["healthcare", "pharmacy", "fda"]
    stability: stable
    documentation: "https://docs.company.com/capabilities/pharmacy"
    realm: "realm://company.com/healthcare/pharmacy"
  spec:
    domainObjects:
      - name: Drug
        description: "Pharmaceutical drug information"
        schema:
          type: object
          required: ["ndcCode", "name"]
          properties:
            ndcCode:
              type: string
              pattern: "^[0-9]{5}-[0-9]{4}-[0-9]{2}$"
            name:
              type: string
            manufacturer:
              type: string
        examples:
          - ndcCode: "50090-1234-01"
            name: "Aspirin"
            manufacturer: "Acme Pharma"
  
    services:
      - name: DrugQuery
        description: "Query drug information by NDC code"
        timeout: 5000
        retries: 3
        idempotent: true
        input:
          domainObjectRef: "DrugQueryRequest"
        output:
          domainObjectRef: "DrugQueryResponse"
        errors:
          - code: "DRUG_NOT_FOUND"
            description: "The requested drug was not found"
            httpStatus: 404
  
    events:
      - name: DrugRecalled
        description: "Emitted when FDA recalls a drug"
        topic: "drug.recalled"
        ordering: true
        payload:
          inlineSchema:
            type: object
            required: ["recallId", "ndcCode", "severity"]
            properties:
              recallId:
                type: string
              ndcCode:
                type: string
              severity:
                type: string
                enum: ["class1", "class2", "class3"]
        filters:
          - field: "severity"
            description: "Filter by recall severity"
  
    loops:
      - name: DrugInteractionCheck
        type: aggregation
        description: "Check drug interactions across data sources"
        recruitment:
          recruitmentTimeout: 5000
          minParticipants: 2
        execution:
          executionTimeout: 30000
          waitStrategy: all
        aggregation:
          strategy: merge
  
    loopStacks:
      - name: PharmacyNetworkSync
        description: "Sync inventory across pharmacy network"
        loops:
          - loopRef: "InventoryBroadcast"
          - loopRef: "InventoryAggregation"

# ============================================
# Validation Rules
# ============================================
validation:
  - "metadata.name must be unique within a realm"
  - "service/event/loop/loopStack names must be unique within a capability"
  - "domainObjectRef must reference existing domain objects"
  - "loopRef in loopStacks must reference existing loops"
  - "version must follow semantic versioning"

# ============================================
# Usage Instructions
# ============================================
usage: |
  1. Store this capability YAML in your realm's codebase
  2. Reference it in your realm's Contract definition
  3. Use realm-cli to validate the capability
  4. Share capabilities when forming realm bridges
  5. Generate type-safe clients from capabilities

commands:
  validate: "realm-cli capability validate ./capabilities/pharmacy.yaml"
  generate-types: "realm-cli capability generate-types --input ./capabilities/ --output ./generated/"
  share: "realm-cli capability export ./capabilities/pharmacy.yaml --format yaml"