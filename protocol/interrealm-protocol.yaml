openapi: 3.0.0
info:
  title: InterRealm Protocol
  version: 1.0.0
  description: |
    Defines the message envelope and core message types for InterRealm communication.
    This specification represents the foundational wire protocol used by RealmMesh
    for distributed message exchange, discovery, and routing across Realms.

paths: {}

components:
  schemas:

    # --------------------------------------------
    # Core Message Envelope
    # --------------------------------------------
    MessageEnvelope:
      type: object
      required: [messageId, sourceRealm, targetRealm, messageType, timestamp, payload]
      properties:
        messageId:
          type: string
          format: uuid
          description: Unique identifier for this message
        sourceRealm:
          type: string
          description: Identifier of the source realm
          example: "realm://org.cluster.finance"
        targetRealm:
          type: string
          description: Identifier of the target realm
          example: "realm://org.cluster.risk"
        messageType:
          type: string
          enum: [service-request, service-response, event, loop-broadcast]
          description: Type of message being sent
        schemaId:
          type: string
          description: Schema identifier for payload validation
          example: "interrealm.healthcare/DrugQuery:v1"
        timestamp:
          type: string
          format: date-time
          description: Time when the message was created
        headers:
          type: object
          additionalProperties: true
          description: Arbitrary message headers
        payload:
          type: object
          description: Message payload object

    # --------------------------------------------
    # Service Request / Response
    # --------------------------------------------
    ServiceRequest:
      allOf:
        - $ref: '#/components/schemas/MessageEnvelope'
        - type: object
          required: [correlationId]
          properties:
            messageType:
              type: string
              enum: [service-request]
            correlationId:
              type: string
              format: uuid
              description: Correlation ID for request-response tracking
            timeout:
              type: integer
              description: Timeout in milliseconds
              default: 30000

    ServiceResponse:
      allOf:
        - $ref: '#/components/schemas/MessageEnvelope'
        - type: object
          required: [correlationId, success]
          properties:
            messageType:
              type: string
              enum: [service-response]
            correlationId:
              type: string
              format: uuid
              description: Correlation ID matching the original request
            success:
              type: boolean
              description: Whether the request was successful
            error:
              $ref: '#/components/schemas/ErrorDetail'

    # --------------------------------------------
    # Event Messaging
    # --------------------------------------------
    Event:
      allOf:
        - $ref: '#/components/schemas/MessageEnvelope'
        - type: object
          properties:
            messageType:
              type: string
              enum: [event]
            eventType:
              type: string
              description: Specific type of event
              example: "agent.loop.heartbeat"

    LoopBroadcast:
      allOf:
        - $ref: '#/components/schemas/MessageEnvelope'
        - type: object
          properties:
            messageType:
              type: string
              enum: [loop-broadcast]
            loopId:
              type: string
              description: Identifier for the broadcast loop
              example: "hospital-network-loop"
            ttl:
              type: integer
              description: Number of hops allowed before expiration
              default: 3

    # --------------------------------------------
    # Error Schema
    # --------------------------------------------
    ErrorDetail:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Machine-readable error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          additionalProperties: true
          description: Additional error context or metadata

    # --------------------------------------------
    # Realm Metadata
    # --------------------------------------------
    RealmInfo:
      type: object
      required: [realmId, name, capabilities]
      properties:
        realmId:
          type: string
          description: Unique realm identifier
          example: "realm://org.cluster.finance"
        name:
          type: string
          description: Human-readable realm name
        description:
          type: string
          description: Realm description
        capabilities:
          type: array
          items:
            type: string
          description: Capabilities this realm provides
          example: ["finance-data", "loan-processing"]
        metadata:
          type: object
          additionalProperties: true
          description: Additional realm metadata

    # --------------------------------------------
    # Mesh Metadata (used by console)
    # --------------------------------------------
    MeshInfo:
      type: object
      required: [uuid, name, version, environment]
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the RealmMesh instance
        name:
          type: string
          description: Human-readable name of the mesh instance
          example: "enterprise-research-mesh"
        version:
          type: string
          description: Version of the mesh
          example: "1.0.0"
        environment:
          type: string
          description: Environment name (dev, staging, prod)
          example: "development"